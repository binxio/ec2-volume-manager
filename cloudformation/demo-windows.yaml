AWSTemplateFormatVersion: '2010-09-09'
Description: EC2 Volume Manager demo
Parameters:
  VPC:
    Type: AWS::EC2::VPC::Id
  Subnets:
    Type: List<AWS::EC2::Subnet::Id>
  Ami:
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-windows-latest/Windows_Server-2016-English-Full-Base'
Resources:
  LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Ref AWS::StackName
      LaunchTemplateData:
        ImageId: !Ref Ami
        InstanceType: t3.nano
        IamInstanceProfile:
          Arn: !GetAtt EC2InstanceProfile.Arn
        UserData: !Base64
          Fn::Sub: |
            <powershell>
                # get the ID of the instance
                $instance = Invoke-WebRequest -Uri http://169.254.169.254/latest/meta-data/instance-id -UseBasicParsing

                # get the volume of the tag which is connected to the volumes
                $valuetag = Get-EC2Tag -Filter @{Name="resource-id";Value=$instance} | Where-Object {$_.Key -eq "ec2-volume-manager-attachment"  } | Select-Object -expand Value

                # get the expected volume with the same tag / value pair
                $expectedvolume = ((Get-EC2Volume).Tags | Where-Object { ($_.key -eq "ec2-volume-manager-attachment") -and ($_.value -eq $valuetag) }).Count

                # get the number of volumes connected to the instance
                $disks = ((get-ec2volume) | Where-Object { ($_.Attachments.InstanceId -eq $instance) }).Tags | Where-Object { ($_.key -eq "ec2-volume-manager-attachment") -and ($_.value -eq $valuetag) }

                # if the numbers do not match, we are waiting for the volume to be attached to the instance
                while ($disks.Count -ne $expectedvolume)
                {
                  $disks = ((get-ec2volume) | Where-Object { ($_.Attachments.InstanceId -eq $instance) }).Tags | Where-Object { ($_.key -eq "ec2-volume-manager-attachment") -and ($_.value -eq $valuetag) }
                  Start-Sleep -s 5
                  Write-Host "waiting for volumes..."
                }

                # get all the volumes 
                $volumes = @(get-ec2volume) | Where-Object { ($_.Attachments.InstanceId -eq $instance) } | ForEach-Object { $_.VolumeId}

                # Set all disk offline, because the will get a default driveletter
                foreach ($vol in $volumes) 
                {
                  $volumeid = ((Get-EC2Volume -VolumeId $vol).VolumeId).Remove(0,4)

                  $disk = Get-Disk | Where-Object {$_.SerialNumber -CLike "*$volumeid*"} 

                  if ( ($disk.Number -ne 0) -and ($disk) )
                  {
                    Write-Host "Setting disknumber: "$disk.Number" offline - volume: $volumeid "
                    Set-Disk -Number $disk.Number -IsOffline $True
                  }
                }

                # loop the volumes and create the disks in windows with driveletter and systemlabel
                foreach ($vol in $volumes) 
                {

                  $volumeid = ((Get-EC2Volume -VolumeId $vol).VolumeId).Remove(0,4)

                  Write-Host "Found volume with id: $volumeid"
                  $DriveLetter = (Get-EC2Volume -VolumeId $vol).Tags | Where-Object { $_.key -eq "DriveLetter" } | Select-Object -expand Value
                  $SystemLabel = (Get-EC2Volume -VolumeId $vol).Tags | Where-Object { $_.key -eq "SystemLabel" } | Select-Object -expand Value

                  $disk = Get-Disk | Where-Object {$_.SerialNumber -CLike "*$volumeid*"} 

                  if ( ($disk) -and ($DriveLetter) -and ($SystemLabel) )
                  {
                     if ( ($disk.PartitionStyle -eq "Raw") -and ($disk.OperationalStatus -eq "Offline") ) 
                     {
                        Initialize-Disk -Number $disk.Number 
                        Clear-Disk -Number $disk.Number -RemoveData -Confirm:$false -PassThru
                        Initialize-Disk -Number $disk.Number 
                        New-Partition -DiskNumber $disk.Number -UseMaximumSize -DriveLetter $DriveLetter | Format-Volume -FileSystem NTFS -NewFileSystemLabel $SystemLabel
                        Write-Host "Creating disk with DriveLetter $DriveLetter and SystemLabel $SystemLabel" 
                     }
                     else 
                     { 
                         if ($disk.OperationalStatus -eq "Offline")
                         {
                            Set-Disk -Number $disk.Number -IsOffline $False
                            $currentDrive = get-partition -DiskNumber $disk.Number| Where-Object { $_.Type -ne "Reserved" } | Select-Object -Expand DriveLetter
                            if ( ($currentDrive -ne $DriveLetter) -and ($DriveLetter) -and ($currentDrive) )
                            {
                                Get-Partition -DriveLetter $currentDrive | Set-Partition -NewDriveLetter $DriveLetter
                                Set-Volume -DriveLetter $DriveLetter -NewFileSystemLabel $SystemLabel
                                Write-Host "Changing drive from $currentDrive to $DriveLetter"
                            }
                            Write-Host "Mounted disk with DriveLetter $DriveLetter and SystemLabel $SystemLabel"
                         }
                         else
                         {
                           Write-Host "Disk with DriveLetter $DriveLetter is already online" 
                         }
                      }
                   } 
                   else
                   {
                      Write-Host "volume not $volumeid not found" 
                   }
                }
            </powershell>
        TagSpecifications:
          - ResourceType: instance
            Tags:
              - Key: Name
                Value: stateful-instance-1

  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref 'EC2Role'

  EC2Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore

  Disk1:
    Type: AWS::EC2::Volume
    Properties:
      AvailabilityZone: !Sub '${AWS::Region}a'
      Size: 8
      Tags:
        - Key: ec2-volume-manager-attachment
          Value: stateful-instance-1      
        - Key: device-name
          Value: xvdf
        - Key: Name
          Value: disk1
        - Key: DriveLetter
          Value: D
        - Key: SystemLabel
          Value: DATA

  Disk2:
    Type: AWS::EC2::Volume
    Properties:
      AvailabilityZone: !Sub '${AWS::Region}a'
      Size: 8
      Tags:
        - Key: ec2-volume-manager-attachment
          Value: stateful-instance-1      
        - Key: device-name
          Value: xvdg
        - Key: Name
          Value: disk2
        - Key: DriveLetter
          Value: L
        - Key: SystemLabel
          Value: Log

  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: !Ref AWS::StackName
      VPCZoneIdentifier:
        - !Select [0, !Ref 'Subnets']
      LaunchTemplate:
        LaunchTemplateId: !Ref 'LaunchTemplate'
        Version: !GetAtt 'LaunchTemplate.LatestVersionNumber'
      MinSize: '0'
      MaxSize: '1'
      DesiredCapacity: '1'
      Tags:
        - Key: ec2-volume-manager-attachment
          Value: stateful-instance-1
          PropagateAtLaunch: true
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MinInstancesInService: 0
        MaxBatchSize: 1
        WaitOnResourceSignals: true
